name: Run Tests

on:
  push:
    branches:
      - cicd-setup  

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18  # Change to the desired Node.js version

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm run test

  build:
    runs-on: ubuntu-latest
    environment: dev
    #needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure Elastic Container Registry credentials
        run: |
            aws configure set aws_access_key_id ${{ secrets.AWS_DEVOPS_ACCES_KEY }} --region ${{ vars.AWS_REGION }}       
            aws configure set aws_secret_access_key ${{ secrets.AWS_DEVOPS_SECRET_ACCES_KEY }} --region ${{ vars.AWS_REGION }}    
      
      - name: ECR log-in
        run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{vars.ECR_REPOSITORY_URL}}

      - name: Build docker image
        run: |
          docker build \
            --build-arg DB_USER_ENV=${{ secrets.DB_USER }}  \
            --build-arg DB_PASSWORD_ENV=${{ secrets.DB_PASSWORD }}  \
            --build-arg DB_HOST_ENV=${{ secrets.DB_HOST }}  \
            --build-arg NODE_ENVIRONMENT=dev \
            -t devops-udem:devops-${{ github.run_id }} .

      - name: Tag image
        run: docker tag devops-udem:devops-${{ github.run_id }} ${{vars.ECR_REPOSITORY_URL}}/devops-udem:devops-${{ github.run_id }}
      
     # - name: Push image
       # run: docker push ${{vars.ECR_REPOSITORY_URL}}/devops-udem:devops-${{ github.run_id }}

  deploy:
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    steps:
      - name: Create Dockerrun.aws.json
        run: |
          echo '{ "AWSEBDockerrunVersion": "1", "Image": {"Name": "${{vars.ECR_REPOSITORY_URL}}/devops-udem:devops-${{ github.run_id }}"},"Ports": [{"ContainerPort": 3001}]}' > Dockerrun.aws.json
      
      - name: Configure aws credentials
        run: |
            aws configure set aws_access_key_id ${{ secrets.AWS_DEVOPS_ACCES_KEY }} --region ${{ vars.AWS_REGION }}       
            aws configure set aws_secret_access_key ${{ secrets.AWS_DEVOPS_SECRET_ACCES_KEY }} --region ${{ vars.AWS_REGION }}    
            ls
            pwd
            cat Dockerrun.aws.json

      - name: Copy a file from s3
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_DEVOPS_ACCES_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_DEVOPS_SECRET_ACCES_KEY }}
          source: 's3://elasticbeanstalk-us-east-1-308516746479/Dockerrun.aws.json'
          dest: Dockerrun.aws.json
